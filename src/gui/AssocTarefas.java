/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import algoritmos.Associacao;
import algoritmos.AssociacaoDeTarefas;
import algoritmos.Pessoa;
import javax.swing.table.DefaultTableModel;
import complementar.myJTable;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author deadlock
 */
public class AssocTarefas extends javax.swing.JPanel {

    /**
     * Creates new form AssocTarefas
     */
    public AssocTarefas() {
        initComponents();
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new myJTable()
        ;
        jFormattedTextFieldTarefa = new javax.swing.JFormattedTextField();
        jFormattedTextFieldPessoa = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(800, 600));

        jScrollPane2.setBorder(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(jTable1);

        jFormattedTextFieldTarefa.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jFormattedTextFieldPessoa.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setText("Tarefas");

        jLabel2.setText("Pessoas");

        jButton1.setText("gerar tabela");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("executar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jFormattedTextFieldTarefa, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jFormattedTextFieldPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 683, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextFieldTarefa, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextFieldPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(jFormattedTextFieldPessoa.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Deve preencher o campo de quantidade de pessoas!");
            return;
        }
        if(jFormattedTextFieldTarefa.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Deve preencher o campo de quantidade de tarefas!");
            return;
        }
        Integer linha = new Integer(jFormattedTextFieldPessoa.getText());
        Integer coluna = new Integer(jFormattedTextFieldTarefa.getText());
        
        if(linha < coluna){
            JOptionPane.showMessageDialog(this,"A quantidade de pessoas deve ser maior ou igual a quantidade de tarefas!");
            return;
        }
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
        
        defaultTableModel.setColumnCount(0);
        defaultTableModel.setRowCount(0);
 
        coluna++;
        
        defaultTableModel.addColumn("Pessoas/Tarefas");
        
        for(int i = 1 ;i < coluna;i++)
            defaultTableModel.addColumn("Tarefa"+(i));

        String [] pessoa = new String [jTable1.getColumnCount()];
        
        for(int i = 0;i < linha;i++){

            pessoa[0] = "Pessoa"+(i+1);
            
            defaultTableModel.addRow(pessoa);
        }
        
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTable1.getSelectionModel().clearSelection();
        if(jTable1.isEditing()) jTable1.getCellEditor().stopCellEditing();
        
        Pessoa pessoas[] = new Pessoa[jTable1.getRowCount()];
        int custos[] = new int[jTable1.getColumnCount()-1];
        
        DefaultTableModel defaultTableModel = (DefaultTableModel)jTable1.getModel();
        
        for(int i=0; i<jTable1.getRowCount(); i++){
            // Primeiro preenche o array de custos para a pessoa i
            for(int j=1; j<jTable1.getColumnCount(); j++){
                
                String value = (String) defaultTableModel.getValueAt(i,j);
                if(value == null || value.isEmpty()) {
                    JOptionPane.showMessageDialog(this,"Todos os campos devem estar preenchidos!");
                    return;
                }
                if(Integer.parseInt(value)>0)
                    custos[j-1] = Integer.parseInt(value);
                else{
                    JOptionPane.showMessageDialog(this,"Valore da tabela devem ser maior que zero!");
                    return;
                }
            
            }
            // Então manda o id da pessoa e o array de custos para o construtor da classe
            pessoas[i] = new Pessoa(i, custos);
        }
        
        // Então chama o algoritmo de associação, passando as pessoas como parâmetros
        AssociacaoDeTarefas associacao = new AssociacaoDeTarefas(pessoas, jTable1.getColumnCount()-1);
        ArrayList<Associacao> solucaoOtima;
        solucaoOtima = associacao.efetuaAssociacoes();
        
        String aux = "";
        for(Associacao solucao: solucaoOtima){
            aux += "Pessoa " + (solucao.getPessoa().getId()+1) + " Tarefa " + (solucao.getTarefa()+1) + "\n";
        }
        
        jTextArea1.setText(aux);
    }//GEN-LAST:event_jButton2ActionPerformed

    private int [][] getValuesTable(){
        DefaultTableModel defaultTableModel = (DefaultTableModel) jTable1.getModel();
        int [][] mat = new int [jTable1.getRowCount()][jTable1.getColumnCount()-1];
        
        for(int i = 0;i < jTable1.getRowCount();i++)
            for(int j = 1;j < jTable1.getColumnCount();j++){
                String value = (String) defaultTableModel.getValueAt(i,j);
                if(value == null || value.isEmpty()) {
                    JOptionPane.showMessageDialog(this,"Todos os campos devem estar preenchidos!");
                    return null;
                }
                else {

                }
            }
        return mat;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFormattedTextField jFormattedTextFieldPessoa;
    private javax.swing.JFormattedTextField jFormattedTextFieldTarefa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
