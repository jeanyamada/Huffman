/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import metodos.Simbolo;

/**
 *
 * @author deadlock
 */
public class HuffmanGui extends javax.swing.JPanel {
    ArrayList<Simbolo> TabelaSimbolo;
    /**
     * Creates new form HuffmanGui
     */
    public HuffmanGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AreaTexto = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabela = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(800, 600));

        jButton1.setText("executar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        AreaTexto.setColumns(20);
        AreaTexto.setRows(5);
        jScrollPane1.setViewportView(AreaTexto);

        Tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Simbolo", "Frequencia", "Codigo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Tabela);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                String texto = AreaTexto.getText();
        Simbolo arvore;
        
        /*  Retirando os espaços e todos os caracteres em letras minúsculas */
        texto = texto.replaceAll("\\s+", "");
        texto = texto.toLowerCase();
        
        
        TabelaSimbolo = GerarTabelaSimbolo(texto);             //Gerando a Tabela de Símbolos
        arvore = ArvoreCompressao(TabelaSimbolo);                   //Gerando a Árvore de Compressão
        TabelaSimbolo = CodificacaoHuffman(TabelaSimbolo,arvore);   //Etapa de codificação
        
        
        DefaultTableModel modeloTabela = (DefaultTableModel) Tabela.getModel();
        modeloTabela.setRowCount(0);
        /*  Imprimindo os itens na tabela.  */
        for(Simbolo s : TabelaSimbolo){
            Object linha[] = {s.getStr(),s.getFrequencia(),s.getCodigo()};
            modeloTabela.addRow(linha);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
/*  Algoritmos  */
    private Simbolo ArvoreCompressao(ArrayList<Simbolo> tabelaSimb){
        /*  Gerar, a partir da 'string', uma árvore de Compressão.  */
        Simbolo arvore = null;
        ArrayList<Simbolo> tabelAux = (ArrayList<Simbolo>) tabelaSimb.clone();
        
        /*  Etapa de codificação    */
        while(tabelAux.size() != 1){
            int menor1 = 0,menor2 = 1;  //Armazenarão os dois nós de menor frequência (nós de nosso interesse).
        /*  Buscando os dois nós.   */
            for(int j=1; j<tabelAux.size();j++){
                if(tabelAux.get(j).getFrequencia()< tabelAux.get(menor1).getFrequencia()){
                    menor2 = menor1;
                    menor1 = j;
                  
                    
                }
                else if(tabelAux.get(j).getFrequencia() < tabelAux.get(menor2).getFrequencia()) menor2 = j;
            }
        /*  Comprimindo os dois nós com as menores frequências em um único nó ('juncao').   */
            Simbolo esq = tabelAux.get(menor1),
                    dir = tabelAux.get(menor2),
                    juncao = new Simbolo(esq.getStr() + dir.getStr(), esq.getFrequencia() + dir.getFrequencia(),esq,dir);
            
            tabelAux.add(juncao);    //Adicionando o nó comprimido 
            tabelAux.remove(menor1);
            menor2 = tabelAux.indexOf(dir);
            tabelAux.remove(menor2);
        } //fim while

        /*  Sobrará, apenas, um símbolo na tabela de símbolos (que é a árvore de compressão).
           Basta retorná-la.    */
        arvore = tabelAux.get(0);
        tabelAux.remove(0);
        return arvore;
    }
    private ArrayList<Simbolo> CodificacaoHuffman(ArrayList<Simbolo> tabelaSimb,Simbolo raiz){
        Simbolo aux;
        String codigo;
        /*  Loop para gerar o código para todos os símbolos da tabela.  */
        for(Simbolo s : tabelaSimb){
            aux = raiz;
            codigo = s.getCodigo();
            /*  Etapa de busca do símbolo 'str'.    */
            while(aux.getStr().equals(s.getStr()) == false){
                if(aux.getEsq().getStr().contains(s.getStr())){
                    codigo = codigo + "0";
                    aux = aux.getEsq();
                }
                else if(aux.getDir().getStr().contains(s.getStr())){
                    codigo = codigo + "1";
                    aux = aux.getDir();
                }
            }
            s.setCodigo(codigo);
        }
        return tabelaSimb;
    }    
    private ArrayList<Simbolo> GerarTabelaSimbolo(String string){
        ArrayList<Simbolo> tab = new ArrayList();   //Tabela símbolo
        
        /*  Inserindo primeiro símbolo da tabela.   */
        String simb = ""+string.charAt(0);
        tab.add(new Simbolo(simb,1,null,null));
        
        for(int i=1; i < string.length(); i++){
            simb = ""+string.charAt(i);
            boolean existe = false;
            for(Simbolo s : tab){
                if(s.getStr().equals(simb)){
                    s.setFrequencia(s.getFrequencia()+1);
                    existe = true;
                    break;
                }
            }
            if(existe == false) tab.add(new Simbolo(simb,1,null,null));
        }       
        return tab;
    }
      

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AreaTexto;
    private javax.swing.JTable Tabela;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
